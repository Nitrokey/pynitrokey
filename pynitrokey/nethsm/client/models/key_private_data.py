# coding: utf-8

"""
    NetHSM

    All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All [base64](https://tools.ietf.org/html/rfc4648#section-4) encoded values are Big Endian. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr, validator

class KeyPrivateData(BaseModel):
    """
    KeyPrivateData
    """
    prime_p: Optional[constr(strict=True)] = Field(None, alias="primeP")
    prime_q: Optional[constr(strict=True)] = Field(None, alias="primeQ")
    public_exponent: Optional[constr(strict=True)] = Field(None, alias="publicExponent")
    data: Optional[constr(strict=True)] = None
    __properties = ["primeP", "primeQ", "publicExponent", "data"]

    @validator('prime_p')
    def prime_p_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9+\/]+={0,3}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9+\/]+={0,3}$/")
        return value

    @validator('prime_q')
    def prime_q_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9+\/]+={0,3}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9+\/]+={0,3}$/")
        return value

    @validator('public_exponent')
    def public_exponent_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9+\/]+={0,3}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9+\/]+={0,3}$/")
        return value

    @validator('data')
    def data_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9+\/]+={0,3}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9+\/]+={0,3}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> KeyPrivateData:
        """Create an instance of KeyPrivateData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> KeyPrivateData:
        """Create an instance of KeyPrivateData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return KeyPrivateData.parse_obj(obj)

        _obj = KeyPrivateData.parse_obj({
            "prime_p": obj.get("primeP"),
            "prime_q": obj.get("primeQ"),
            "public_exponent": obj.get("publicExponent"),
            "data": obj.get("data")
        })
        return _obj


