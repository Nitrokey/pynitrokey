# coding: utf-8

"""
    NetHSM

    All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All [base64](https://tools.ietf.org/html/rfc4648#section-4) encoded values are Big Endian. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conint, conlist, constr, validator
from pynitrokey.nethsm.client.models.key_mechanism import KeyMechanism
from pynitrokey.nethsm.client.models.key_restrictions import KeyRestrictions
from pynitrokey.nethsm.client.models.key_type import KeyType

class KeyGenerateRequestData(BaseModel):
    """
    KeyGenerateRequestData
    """
    mechanisms: conlist(KeyMechanism) = Field(...)
    type: KeyType = Field(...)
    length: Optional[conint(strict=True, le=8192, ge=128)] = None
    id: Optional[constr(strict=True, max_length=128, min_length=1)] = None
    restrictions: Optional[KeyRestrictions] = None
    __properties = ["mechanisms", "type", "length", "id", "restrictions"]

    @validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> KeyGenerateRequestData:
        """Create an instance of KeyGenerateRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of restrictions
        if self.restrictions:
            _dict['restrictions'] = self.restrictions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> KeyGenerateRequestData:
        """Create an instance of KeyGenerateRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return KeyGenerateRequestData.parse_obj(obj)

        _obj = KeyGenerateRequestData.parse_obj({
            "mechanisms": obj.get("mechanisms"),
            "type": obj.get("type"),
            "length": obj.get("length"),
            "id": obj.get("id"),
            "restrictions": KeyRestrictions.from_dict(obj.get("restrictions")) if obj.get("restrictions") is not None else None
        })
        return _obj


